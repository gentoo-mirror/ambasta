From d6e7aa138e62fd893e7e98cccf5b0f2857ea9bbe Mon Sep 17 00:00:00 2001
From: Amit Prakash Ambasta <amit.prakash.ambasta@gmail.com>
Date: Fri, 11 Mar 2022 16:13:14 +0530
Subject: [PATCH 25/26] Skip pip check

Signed-off-by: Amit Prakash Ambasta <amit.prakash.ambasta@gmail.com>
---
 python/mach/mach/site.py | 67 +---------------------------------------
 1 file changed, 1 insertion(+), 66 deletions(-)

diff --git a/python/mach/mach/site.py b/python/mach/mach/site.py
index 187f5b0d96..045e6434d8 100644
--- a/python/mach/mach/site.py
+++ b/python/mach/mach/site.py
@@ -994,73 +994,8 @@ def _assert_pip_check(topsrcdir, pthfile_lines, virtualenv_name):
     If there's an incompatibility, raise an exception and allow it to bubble up since
     it will require user intervention to resolve.
     """
-    if os.environ.get(
-        f"MACH_SYSTEM_ASSERTED_COMPATIBLE_WITH_{virtualenv_name.upper()}_SITE", None
-    ):
-        # Don't re-assert compatibility against the system python within Mach subshells.
-        return
 
-    if (
-        virtualenv_name == "mach"
-        and os.environ.get("MACH_USE_SYSTEM_PYTHON")
-        and not os.environ.get("MOZ_AUTOMATION")
-    ):
-        # Since this assertion takes some time, warn users who have explicitly opted
-        # in. Since we only want this message to be printed once, only do it for the
-        # first virtualenv that's used (which is always "mach").
-        print(
-            "Since Mach has been requested to use the system Python "
-            "environment, it will need to verify compatibility before "
-            "running the current command. This may take a couple seconds.\n"
-            "Note: you can avoid this delay by unsetting the "
-            "MACH_USE_SYSTEM_PYTHON environment variable."
-        )
-
-    with tempfile.TemporaryDirectory() as check_env_path:
-        # Pip detects packages on the "sys.path" that have a ".dist-info" or
-        # a ".egg-info" directory. The majority of our Python dependencies are
-        # vendored as extracted wheels or sdists, so they are automatically picked up.
-        # This gives us sufficient confidence to do a `pip check` with both vendored
-        # packages + system packages in scope, and trust the results.
-        # Note: rather than just running the system pip with a modified "sys.path",
-        # we create a new virtualenv that has our pinned pip version, so that
-        # we get consistent results (there's been lots of pip resolver behaviour
-        # changes recently).
-
-        subprocess.check_call(
-            [
-                sys.executable,
-                _virtualenv_py_path(topsrcdir),
-                "--no-download",
-                check_env_path,
-            ],
-            stdout=subprocess.DEVNULL,
-        )
-        check_env = PythonVirtualenv(check_env_path)
-        with open(
-            os.path.join(os.path.join(check_env.site_packages_dir()), PTH_FILENAME),
-            "w",
-        ) as f:
-            f.write("\n".join(pthfile_lines))
-
-        pip = [check_env.python_path, "-m", "pip"]
-        check_result = subprocess.run(
-            pip + ["check"],
-            stdout=subprocess.PIPE,
-            stderr=subprocess.STDOUT,
-            universal_newlines=True,
-        )
-        if check_result.returncode:
-            subprocess.check_call(pip + ["list", "-v"], stdout=sys.stderr)
-            print(check_result.stdout, file=sys.stderr)
-            raise Exception(
-                'According to "pip check", the current Python '
-                "environment has package-compatibility issues."
-            )
-
-        os.environ[
-            f"MACH_SYSTEM_ASSERTED_COMPATIBLE_WITH_{virtualenv_name.upper()}_SITE"
-        ] = "1"
+    return True
 
 
 def _deprioritize_venv_packages(virtualenv):
-- 
2.35.1

